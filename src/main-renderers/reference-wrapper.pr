{*
Injectable blueprint which either uses token reference or rendered #body

Source data: Token Metadata and Payload, all types (https://developers.supernova.io/design-system-data/tokens)
Note: Token is passed as `context` property because it is injected

{
  "context": {
    "id": string
    "name": string
    "description": string
    "tokenType": Depends on the token type
    "origin": ItemOrigin | null
    "value": Depends on the token type
  }
}


/* description */
*}
{[ if !context.referencedToken ]}
{{ #body }}
{[ else ]}
{[ let tokenGroup = ds.tokenGroupContainingTokenId(context.id) /]}
{[ let prefix = "" /]}
{[ switch context.tokenType ]}
{[ case "Color" ]}{[ prefix = behavior.colorTokenPrefix /]}
{[ case "Typography" ]}{[ prefix = behavior.typographyTokenPrefix /]}  
{[ case "Shadow" ]}{[ prefix = behavior.shadowTokenPrefix /]}  
{[ case "Border" ]}{[ prefix = behavior.borderTokenPrefix /]}  
{[ case "Measure" ]}{[ prefix = behavior.measureTokenPrefix /]}  
{[ case "Gradient" ]}{[ prefix = behavior.gradientTokenPrefix /]}  
{[ default ]}{[ prefix = "" /]}  
{[/]}
{[ let tokenName = readableVariableName(context, tokenGroup, prefix) /]}
{{ tokenName }}
{[/]}
